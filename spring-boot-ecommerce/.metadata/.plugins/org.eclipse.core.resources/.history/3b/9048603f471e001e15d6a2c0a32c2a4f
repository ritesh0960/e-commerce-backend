package com.ritesh.ecommerce.config;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.hibernate.boot.Metadata;
import org.hibernate.metamodel.model.domain.DomainType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.rest.core.config.RepositoryRestConfiguration;
import org.springframework.data.rest.core.mapping.HttpMethods;
import org.springframework.data.rest.webmvc.config.RepositoryRestConfigurer;
import org.springframework.http.HttpMethod;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.util.pattern.PathPattern;

import com.ritesh.ecommerce.entities.Country;
import com.ritesh.ecommerce.entities.Product;
import com.ritesh.ecommerce.entities.State;
import com.ritesh.ecommerce.entities.productCategory;

import jakarta.persistence.EntityManager;
import jakarta.persistence.metamodel.EntityType;

@Configuration
public class restConfig implements RepositoryRestConfigurer{
	
	private EntityManager entityManager;
	
	@Autowired
	public void MyDataRestConfig(EntityManager thEntityManager) {
		entityManager = thEntityManager;
	}

	@Override
	public void configureRepositoryRestConfiguration(RepositoryRestConfiguration config, CorsRegistry cors) {
		// TODO Auto-generated method stub
		HttpMethod[] theUnsupportedActions = {HttpMethod.PUT,HttpMethod.POST,HttpMethod.DELETE};
		
		//disable http methods for put post and delete
		
		config.getExposureConfiguration()
		      .forDomainType(Product.class)
		      .withItemExposure((metdata, httpMethods)->httpMethods.disable(theUnsupportedActions))
		      .withCollectionExposure((metdata, HttpMethods)->HttpMethods.disable(theUnsupportedActions));
		
		
		config.getExposureConfiguration()
	      .forDomainType(productCategory.class)
	      .withItemExposure((metdata, httpMethods)->httpMethods.disable(theUnsupportedActions))
	      .withCollectionExposure((metdata, HttpMethods)->HttpMethods.disable(theUnsupportedActions));
		
		config.getExposureConfiguration()
	      .forDomainType(Country.class)
	      .withItemExposure((metdata, httpMethods)->httpMethods.disable(theUnsupportedActions))
	      .withCollectionExposure((metdata, HttpMethods)->HttpMethods.disable(theUnsupportedActions));
		
		
		config.getExposureConfiguration()
	      .forDomainType(State.class)
	      .withItemExposure((metdata, httpMethods)->httpMethods.disable(theUnsupportedActions))
	      .withCollectionExposure((metdata, HttpMethods)->HttpMethods.disable(theUnsupportedActions));
		
		
	//	RepositoryRestConfigurer.super.configureRepositoryRestConfiguration(config, cors);
		
		
		exposeIds(config);
	
	}
	
	

	private void exposeIds(RepositoryRestConfiguration config) {
	//expose entity ids
	
	
	//get a list of all entity class from the entity manager
	Set<EntityType<?>> entities = entityManager.getMetamodel().getEntities();
	
	
	// create an array of the entity type
	
	List<Class> entityClasses = new ArrayList<>();
	
	//get the entity type for the entities
	
	for(EntityType tempEntityType : entities) {
		entityClasses.add(tempEntityType.getJavaType());
		

	}

	//expose the entities ids for the array of entity/domain types
	
	Class[] DomainTypes = entityClasses.toArray(new Class[0]);
	config.exposeIdsFor(DomainTypes);
	
}
}

